//===================================================================================================================================
//【Readme.txt】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/09/17
// [更新日]2019/09/20
//===================================================================================================================================

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
※　[※注意※]																				※
※　基本的には、各シーン内にそれぞれの処理を記述してもらいます。							※
※　Direcotrクラスや、エントリポイントなどに変更を加えたい場合は必ず確認を取ってください。	※
※　プログラムの大まかな流れは下記の[プログラム構造]を参照してください。					※
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※

[※注意※]
このTestProjectは、ゲームタイトルが決定されるまでの一時的なプロジェクトです。
ゲームタイトルが決定され次第、プロジェクトの再作成を行います。
これは、プロジェクト名が作成される実行ファイルの名前となるためです。

[レイヤー説明]
Constant Layer ・・・ゲーム固有でない基本的なモジュール（エントリポイントやウィンドウ、DirectX9デバイス、入力処理など）

Game Layer ・・・・・ゲーム固有のモジュール（プレイヤーや、固有のシーン、エフェクトやフィールドなど）

Loader Layer ・・・・各種データリソースを読み込むモジュール（テクスチャローダーや、シェーダーローダーなど）

Readme ・・・・・・・コーディング規約など事前に把握して欲しいドキュメントなど

Resorce Layer・・・・テクスチャや出力ファイル、３Ｄモデルデータ、サウンドデータなどの各種データ


[プログラム構造]

	WINAPI WinMain	//[Entry.cpp]エントリポイント：プログラムの開始位置
		|
		|-director->Director::run()
		|				|-Director::initialize()
		|					|-scene->initialize()
		|				|-Director::mainLoop()
		|					|-Director::changeNextScene()
		|					|			|-scene->uninitialize()
		|					|			|-SAFE_DELETE(scene)
		|					|			|-scene = new AbstractScene()
		|					|
		|					|-Director::update()
		|					|			|-scene->AbstractScene::update()
		|					|			|-scene->AbstractScene::collision()
		|					|			|-scene->AbstractScene::AI()
		|					|			|-scene->AbstractScene::createGUI()
		|					|
		|					|-Director::render()
		|					|			|-scene->AbstractScene::render()
		|
		|-delete director::~Director()
							|-SAFE_DELETE(scene)

[各シーンについて]
	各シーンは、抽象インターフェースであるAbstractSceneクラスを継承しています。
	シーンのポインタは、Directorクラスのメンバ変数にあります。
	Directorクラスが以下の処理の流れを定義しています。
		●コンストラクタ[AbstractScene::initialize]		
			[備考:デバイスや、入力、リソース読込クラスなどのポインタを取得]

		●初期化[AbstractScene::initialize]		
			[備考:シーンの生成時、一度だけ呼び出されます。]

		●終了処理[AbstractScene::uninitialize]	
			[備考:シーンの削除時、一度だけ呼び出されます。]

		●更新[AbstractScene::update]			
			[備考:毎フレーム呼び出されます。frameTimeを引数とし、フレーム数ではなく時間当たりの処理が可能です。]

		●描画[AbstractScene::render]			
			[備考:毎フレーム呼び出されます。各シーンによって画面分割・3D描画・2D描画(UI)などの処理の分類を
				　Direct3D9クラスの関数やデバイス及びCameraクラスのSetTransformを呼び出して、定義する必要があります。]

		●衝突処理[AbstractScene::collision]		
			[備考:毎フレーム呼び出されます。各シーンのオブジェクトの衝突処理を記述します。]

		●ＡＩ処理[AbstractScene::AI]				
			[備考:毎フレーム呼び出されます。必要に応じて活用してください。]

		●デバッグ用GUI処理[AbstractScene::createGUI]
			[備考:毎フレーム呼び出されます。ここで、デバッグ用ウィンドウを作成してください。
				　Directorにより既にbeginGUI()とendGUI()が作成されていますので、階層構造による作成が望ましいです。
				　取扱い経験が浅いので試行錯誤中です。提案があればお気軽にお声がけください(・ω・)]

	シーンは、汎用的な下記のクラスのポインタをコンストラクタにより取得しています。
	●LPDIRECT3DDEVICE9 device				：DirectX9の描画やロードなどを行うデバイス
	●Direct3D9* direct3D9					：DirectX9のデバイスや、パラメータを管理するクラス。changeViewport系関数により描画範囲を変更できる。
	●Input* input							：入力クラス。キーボード・マウス・コントローラを管理。メソッドにより各入力状態を取得できる。
	●TextureLoader* textureLoader			：テクスチャ読込クラス。アプリ全体で使用する全テクスチャを管理。getterによりポインタを取得できる。
	●StaticMeshLoader* staticMeshLoader	：3Dモデル読込クラス。アプリ全体で使用する非アニメーションの全モデルを管理。getterによりポインタを取得できる。
	●ShaderLoader* shaderLoader			：シェーダー読込クラス。アプリ全体で使用する全シェーダーを管理。getterによりポインタを取得できる。
	●AnimationLoader* animationLoader		：アニメーションモデル読み込みクラス。改良中・・・
	●TextLoader* textLoader				：テキストリソースの読み込み及び作成を行うクラス。getterによりポインタを取得できる。改良中・・・
	●GameMaster* gameMaster				：シーンを跨ぐデータを保持・管理するクラス。改良中・・・
	●Sound* sound							：サウンドプログラマにお任せします。
	※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
	※　[※禁止事項※]																							※
	※　読込クラスなどの汎用クラスが確保したリソースやデバイスなどは、原則そのクラス内で後処理を行っています。	※
	※　ですので、getterなどでポインタを受け取り、利用することはＯＫですが、									※
	※　deleteやReleaseなどの処理を受け取り先で行わないでください。												※
	※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※

[その他、「事前に伝達/共有したいこと」や「記述して欲しい要望」などがあれば、下記にご自由に記述してください(^ω^)ｂ]
日付や記述者の氏名もあると助かります(´-ω-`)
このテキストにおける記述内容に誤りがあるよ〜などの報告でもＯＫです。
プログラムのバグ報告は、ここではなくLINEや別文書、その他の手法でよりアクティブな場所で共有/喚起しましょう〜

●事前に伝達/共有したいこと

●記述して欲しい要望

