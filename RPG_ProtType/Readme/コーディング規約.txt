//===================================================================================================================================
//【コーティング規約.txt】
// [作成者]HAL東京GP12A332 11 菅野 樹
// [作成日]2019/09/17
// [更新日]2019/09/20
//===================================================================================================================================

Coding convention

[目的]
・コードの記述方法を統一することで、プログラム全体の可読性を高める。
・プロジェクト全体での情報共有の円滑化。

[ファイル名の命名規則]
ソースファイル：FileName.cpp
ヘッダファイル：FileName.h

[命名規則]
・PascalCase[パスカルケース：先頭大文字、それ以降の単語区切りも大文字]
　対象:クラス(コンストラクタ、デストラクタ)、構造体
　ex)class ObjectManager、struct SpriteData

・camelCase[キャメルケース：先頭小文字、それ以降の単語区切りは大文字]
　対象:変数名、関数名、メソッド名
　ex)int speed、void update()、renderFlag

・snake_case[すべて小文字、単語区切りをアンダースコアでつなぐ]
　対象:なし

・SNAKE_CASE[すべて大文字、単語区切りをアンダースコア[_]でつなぐ]
　対象:マクロ名、const 定数、列挙体
　ex)#define WINDOW_WIDTH、const float PLAYER_SPEED、OBJECT_NUM

・bool変数は、[is?],[enable?],[can?],[on?],[has?]など
　trueのときどうなっているかが明確にわかるようにする。

[コーディングスタイル]
・ヘッダの二重定義防止[インクルードガード]には、#pragm onceを使用する。
・変数名は、略称を使用しないが、可能な限り短く、伝わりやすいものを。

[禁止事項]
・マジックナンバー[処理中に数字を直接入力すること。]→原則、定数化する。
・ヘッダファイル内へのusing、using namespaceの記述
・Pimplイディオム[クラス内クラスの前方宣言]
・略称禁止
・ハンガリアン禁止：グローバル変数に[g_]を付けたりすることはダメ。

[制限事項]


[推奨事項]
・可能な限りグローバル変数を定義せずクラスのメンバ変数などにできるように心がけよう。クラス内のstaticは良い。
・可能な限り動的なメモリ確保を心がけよう。